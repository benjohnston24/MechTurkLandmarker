#! /usr/bin/env python
# -*- coding: utf-8 -*-
# S.D.G

"""Script to generate the json files that define the number of points
and the correct position within the landmarking system"""

# Imports
import json
import os
import pandas as pd
import numpy as np
from string import Template
from utilities import SAVE_FOLDER, LMRKS_FILE
from collections import OrderedDict

__author__ = 'Ben Johnston'
__revision__ = '0.1'
__date__ = 'Thursday 1 June  10:36:54 AEST 2017'
__license__ = 'BSD 3-Clause'


CONFIG_JSON = os.path.join(SAVE_FOLDER, "config.json")
CHECK_JS = os.path.join(SAVE_FOLDER, "check.js")

# X, Y coords 
X = 0
Y = 1
DIRECTIONS = ["X", "Y"]
# Javascript code templates
CHECK_JS_INTRO = """//File generated by: utilities/generate_config_files.py
//DO NOT MANUALLY EDIT
function check(obj) {
    acc = [];\n"""
X_TEMPLATE = Template(
    """    if ((obj.P$X1 && obj.P$X1[0]) < (obj.P$X2 && obj.P$X2[0])) acc.push("invalid: P$X1 is to the left of P$X2");\n""")
Y_TEMPLATE = Template(
    """    if ((obj.P$X1 && obj.P$X1[1]) < (obj.P$X2 && obj.P$X2[1])) acc.push("invalid: P$X2 is below P$X1");\n""")
TEMPLATES = {
    X: X_TEMPLATE,
    Y: Y_TEMPLATE,
}
JS_END = "    return acc;\n}"


def generate_config_json():
    """Generate a json file containing the number of points"""

    df = pd.read_csv(LMRKS_FILE).values
    num_pts = df.shape[0]
    json_data = OrderedDict() 
    for i in range(num_pts):
        json_data["P%d" % (i + 1)] = {"kind": "point"}

    with open(CONFIG_JSON, 'w') as f:
        json.dump(json_data, f, indent=4)

def generate_javascript_check(buff=0.1):
    """Generate the check.js file 

    buff: as a percentage
    If the x or y coordinates are within buff of each other,
    then do not apply the positional requirement

    """
    assert((buff > 0) and (buff <= 1))
    eps = np.finfo('float').eps
    # Write the intro to file
    with open(CHECK_JS, "w") as f:
        f.write(CHECK_JS_INTRO)

    df = pd.read_csv(LMRKS_FILE).values
    limit = 1 - buff

    rules = {}
    rules[X] = []
    rules[Y] = []
    # Iterate each point, comparing against the previous
    for i in range(0, df.shape[0]):
        for j in range(0, df.shape[0]):
            ratios = df[i] / (df[j] + eps)

            for direction in [X, Y]:
                # The directional distance between the points is big enough to validate
                if abs(1 - ratios[direction]) >= buff:
                    #Check which is smallest and apply the rule 
                    if df[i][direction] > df[j][direction]:
                        if [i, j] not in rules[direction]:
                            rules[direction].append([i, j])
                    else:
                        if [j, i] not in rules[direction]:
                            rules[direction].append([j, i])

    # Generate javascript statements
    js_contents = ""
    for direction in [X, Y]:
        template = TEMPLATES[direction]
        for rule in rules[direction]:
            js_contents += \
                template.substitute(
                    X1=rule[0] + 1,
                    X2=rule[1] + 1)

    # Finish the file and close
    js_contents += JS_END

    with open(CHECK_JS, "a") as f:
        f.write(js_contents)

if __name__ == "__main__":
    generate_config_json()
    generate_javascript_check()
